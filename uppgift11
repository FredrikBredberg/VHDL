library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Test is


Port ( Switch1 : in std_logic ;
       Switch2 : in std_logic ; --reset
       CLK  : in std_logic ;
       anod : out std_logic_vector(3 downto 0);
       sseg : out unsigned(6 downto 0);
       LEDS : out std_logic_vector(7 downto 0)
       --Switch2,CLK,LD,Switch1 : in std_logic; --count
       --count : out unsigned (29 downto 0);
       --bin: in unsigned (7 downto 0); -- bin_to_bcd
       --bcd0: out unsigned (3 downto 0);
       --bcd1: out unsigned (3 downto 0);
       --bcd2: out unsigned (3 downto 0);
       --A, B, C : in unsigned(3 downto 0); --mux
       --sel : in unsigned ( 1 downto 0);
       --mux_out : out unsigned ( 3 downto 0);
       --BCDin : in unsigned (3 downto 0); --BCD_TO_7SEG
       --Seven_Segment : out unsigned (6 downto 0);
       --Counter_in : in unsigned(1 downto 0);
       --Dec_ut : out unsigned( 3 downto 0)
       );
end Test ;


architecture Behavioral of Test is

signal count : unsigned (29 downto 0);
signal bcd0 : unsigned (3 downto 0);
signal bcd1 : unsigned (3 downto 0);
signal bcd2 : unsigned (3 downto 0);
signal mux_out : unsigned (3 downto 0);
signal seven_segment : unsigned (6 downto 0);
signal t_cnt : unsigned (29 downto 0); --Counter
signal P : unsigned (9 downto 0) := (others => '0'); --bin_to_bcd
signal counter_in : unsigned (1 downto 0);
signal dec_ut : std_logic_vector(3 downto 0);
signal sel : unsigned(1 downto 0);
signal bin : unsigned (7 downto 0);
signal BCDin : unsigned (3 downto 0);

begin
  mux_out <= bcd0 when (sel) = "00" else --mux
                bcd1 when (sel) = "01" else
                bcd2 when (sel) = "10" else
                 "0000";  
BCDin <= mux_out;

process (CLK, Switch1, Switch2) -- Counter
    begin
        if (Switch2 = '1') then
           t_cnt <= (others => '0'); -- clear
    elsif (rising_edge(CLK)) then
            if (Switch1 = '1') then t_cnt <= t_cnt + 1; -- incr
            else t_cnt <= t_cnt - 1; -- decr
            end if;
        end if;
    end process;
 count <= t_cnt;
 sel <= count(15 downto 14);
 bin <= count(29 downto 22);
 --BCDin <= count(29 downto 22);
 
process(bin) --bin_to_bcd
 
     variable z: unsigned (17 downto 0);
 
     begin
         for i in 0 to 17 loop
             z(i) := '0';
         end loop;
          z(10 downto 3) := bin;
  
         for i in 0 to 4 loop
             if z(11 downto 8) > 4 then    
                z(11 downto 8) := z(11 downto 8) + 3;
             end if;
             if z(15 downto 12) > 4 then    
                z(15 downto 12) := z(15 downto 12) + 3;
             end if;
             z(17 downto 1) := z(16 downto 0);
         end loop;
         
     P <= z(17 downto 8);    
     end process;
     
     bcd0 <= P(3 downto 0);
     bcd1 <= P(7 downto 4);
     bcd2 <= "00" & P(9 downto 8);
  
process(BCDin)--BCD_TO_7SEG
                    begin
                     
                    case BCDin is
                    when "0000" =>
                    Seven_Segment <= "0000001"; --0
                    when "0001" =>
                    Seven_Segment <= "1001111"; --1
                    when "0010" =>
                    Seven_Segment <= "0010010"; --2
                    when "0011" =>
                    Seven_Segment <= "0000110"; --3
                    when "0100" =>
                    Seven_Segment <= "1001100"; --4
                    when "0101" =>
                    Seven_Segment <= "0100100"; --5
                    when "0110" =>
                    Seven_Segment <= "0100000"; --6
                    when "0111" =>
                    Seven_Segment <= "0001111"; --7
                    when "1000" =>
                    Seven_Segment <= "0000000"; --8
                    when "1001" =>
                    Seven_Segment <= "0000100"; --9
                    when others =>
                    Seven_Segment <= "1111111"; --blank
                    end case;
                     
                    end process;
                  
counter_in <= sel;  
                  
process(dec_ut, counter_in)
                        begin
                                if (Counter_in = "00") then
                                    Dec_ut <= "1110";
                                elsif (counter_in = "01") then 
                                    Dec_ut <= "1101";
                                elsif (counter_in = "10") then
                                    Dec_ut <= "1011";
                                else 
                                    Dec_ut <= "1111";
                                end if;
                                 
                       end process;        
                                     
LEDS <= std_logic_vector(count(29 downto 22)); 
anod <= dec_ut;
sseg <= seven_segment;

end Behavioral;
